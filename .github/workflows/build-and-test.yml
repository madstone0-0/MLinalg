name: Build and Test

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        build_tests: [ON]
        compiler:
          - {c: gcc-15, cpp: g++-15}
          - {c: clang-20, cpp: clang++-20}

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # Cache apt package downloads to speed up repeated installs
      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ matrix.compiler.c }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install GCC 15 and Clang 20
        run: |
          sudo apt-get update
          sudo apt-get install -y wget software-properties-common lsb-release gnupg

          # Add Ubuntu Toolchain PPA for GCC 15
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test

          # Add LLVM repo for Clang 20
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 20

          # Install compilers
          sudo apt-get install -y gcc-15 g++-15

          # Register alternatives
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-15 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-15 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-20 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-20 100

          echo "=== Installed compiler versions ==="
          gcc-15 --version
          g++-15 --version
          clang-20 --version
          clang++-20 --version

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y catch2 libboost-all-dev

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cpp }}
          -DCMAKE_C_COMPILER=${{ matrix.compiler.c }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DTESTS=${{ matrix.build_tests }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Run Tests
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.compiler.c }}
          path: ${{ steps.strings.outputs.build-output-dir }}
